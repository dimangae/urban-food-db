CREATE TABLE Supplier (
  Supplier_ID     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Name            VARCHAR2(100) NOT NULL,
  Contact         NUMBER(10) NOT NULL,  -- 10-digit contact number
  Address         VARCHAR2(200)
);

CREATE TABLE Customer (
  Customer_ID     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Name            VARCHAR2(100) NOT NULL,
  Email           VARCHAR2(100) NOT NULL,
  Contact         NUMBER(10) NOT NULL,  -- 10-digit contact number
  Address         VARCHAR2(200)
);

CREATE TABLE Product (
  Product_ID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Supplier_ID     NUMBER NOT NULL,
  Name            VARCHAR2(100) NOT NULL,
  Description     VARCHAR2(500),
  Category        VARCHAR2(50),
  Price           NUMBER(10,2) NOT NULL,
  Stock_Quantity  NUMBER DEFAULT 0,
  CONSTRAINT fk_Product_Supplier FOREIGN KEY (Supplier_ID) REFERENCES Supplier(Supplier_ID)
);

CREATE TABLE Orders (
  Order_ID         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Customer_ID      NUMBER NOT NULL,
  Order_Date       DATE DEFAULT SYSDATE,
  Shipping_Address VARCHAR2(200),
  Total_Amount     NUMBER(10,2),
  CONSTRAINT fk_Orders_Customer FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)
);

CREATE TABLE Order_Item (
  Order_ID   NUMBER NOT NULL,
  Product_ID NUMBER NOT NULL,
  Quantity   NUMBER NOT NULL,
  Unit_Price NUMBER(10,2) NOT NULL,
  CONSTRAINT pk_OrderItem PRIMARY KEY (Order_ID, Product_ID),
  CONSTRAINT fk_OrderItem_Order FOREIGN KEY (Order_ID) REFERENCES Orders(Order_ID),
  CONSTRAINT fk_OrderItem_Product FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)
);
CREATE TABLE Payment (
  Payment_ID     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Order_ID       NUMBER NOT NULL,
  Payment_Date   DATE DEFAULT SYSDATE,
  Payment_Method VARCHAR2(50),
  Amount         NUMBER(10,2) NOT NULL,
  CONSTRAINT fk_Payment_Order FOREIGN KEY (Order_ID) REFERENCES Orders(Order_ID)
);
CREATE TABLE Delivery (
  Delivery_ID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Order_ID         NUMBER NOT NULL,
  Delivery_Date    DATE,
  Delivery_Status  VARCHAR2(50),
  CONSTRAINT fk_Delivery_Order FOREIGN KEY (Order_ID) REFERENCES Orders(Order_ID)
);


CREATE TABLE Cart (
  Cart_ID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Customer_ID  NUMBER NOT NULL,
  Created_Date DATE DEFAULT SYSDATE,
  Status       VARCHAR2(20) DEFAULT 'Active',
  CONSTRAINT fk_Cart_Customer FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)
);
CREATE TABLE Cart_Item (
  Cart_ID     NUMBER NOT NULL,
  Product_ID  NUMBER NOT NULL,
  Quantity    NUMBER NOT NULL,
  Date_Added  DATE DEFAULT SYSDATE,
  CONSTRAINT pk_CartItem PRIMARY KEY (Cart_ID, Product_ID),
  CONSTRAINT fk_CartItem_Cart FOREIGN KEY (Cart_ID) REFERENCES Cart(Cart_ID),
  CONSTRAINT fk_CartItem_Product FOREIGN KEY (Product_ID) REFERENCES Product(Product_ID)
);

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE insert_supplier(
  pa_name   IN VARCHAR2,
  pa_phone  IN NUMBER,     
  pa_addr   IN VARCHAR2,
  ou_supId  OUT NUMBER
) AS
BEGIN
  INSERT INTO Supplier (Name, Contact, Address)
    VALUES (pa_name, pa_phone, pa_addr)
    RETURNING Supplier_ID INTO ou_supId;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Supplier inserted with id: ' || ou_supId);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error in insert_supplier: ' || SQLERRM);
    ROLLBACK;
END insert_supplier;
/

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE insert_customer(
  pa_name   IN VARCHAR2,
  pa_email  IN VARCHAR2,
  pa_phone  IN NUMBER,       -- 10-digit number
  pa_addr   IN VARCHAR2,
  ou_custId OUT NUMBER
) AS
BEGIN
  INSERT INTO Customer (Name, Email, Contact, Address)
    VALUES (pa_name, pa_email, pa_phone, pa_addr)
    RETURNING Customer_ID INTO ou_custId;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Customer inserted with id: ' || ou_custId);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error in insert_customer: ' || SQLERRM);
    ROLLBACK;
END insert_customer;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE insert_product(
  pa_supId    IN NUMBER,
  pa_name     IN VARCHAR2,
  pa_desc     IN VARCHAR2,
  pa_cat      IN VARCHAR2,
  pa_price    IN NUMBER,
  pa_stock    IN NUMBER,
  ou_prodId   OUT NUMBER
) AS
BEGIN
  INSERT INTO Product (Supplier_ID, Name, Description, Category, Price, Stock_Quantity)
    VALUES (pa_supId, pa_name, pa_desc, pa_cat, pa_price, pa_stock)
    RETURNING Product_ID INTO ou_prodId;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Product inserted with id: ' || ou_prodId);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error in insert_product: ' || SQLERRM);
    ROLLBACK;
END insert_product;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE insert_order(
  pa_custId IN NUMBER,
  pa_date   IN DATE,
  pa_ship   IN VARCHAR2,
  pa_total  IN NUMBER,
  ou_ordId  OUT NUMBER
) AS
BEGIN
  INSERT INTO Orders (Customer_ID, Order_Date, Shipping_Address, Total_Amount)
    VALUES (pa_custId, pa_date, pa_ship, pa_total)
    RETURNING Order_ID INTO ou_ordId;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Order inserted with id: ' || ou_ordId);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error in insert_order: ' || SQLERRM);
    ROLLBACK;
END insert_order;
/

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE insert_oitem(
  pa_ordId   IN NUMBER,
  pa_prodId  IN NUMBER,
  pa_quant   IN NUMBER,
  pa_uPrice  IN NUMBER
) AS
BEGIN
  INSERT INTO Order_Item (Order_ID, Product_ID, Quantity, Unit_Price)
    VALUES (pa_ordId, pa_prodId, pa_quant, pa_uPrice);
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Order item inserted for order ' || pa_ordId);
EXCEPTION
  WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE('Error in insert_order_item: ' || SQLERRM);
    ROLLBACK;
END insert_oitem;
/

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE insert_payment(
  pa_ordId   IN NUMBER,
  pa_date    IN DATE,
  pa_meth    IN VARCHAR2,
  pa_amount  IN NUMBER,
  ou_payId   OUT NUMBER
) AS
BEGIN
  INSERT INTO Payment (Order_ID, Payment_Date, Payment_Method, Amount)
    VALUES (pa_ordId, pa_date, pa_meth, pa_amount)
    RETURNING Payment_ID INTO ou_payId;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Payment inserted with id: ' || ou_payId);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error in insert_payment: ' || SQLERRM);
    ROLLBACK;
END insert_payment;
/

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE insert_delivery(
  pa_ordId   IN NUMBER,
  pa_date    IN DATE,
  pa_status  IN VARCHAR2,
  ou_delId   OUT NUMBER
) AS
BEGIN
  INSERT INTO Delivery (Order_ID, Delivery_Date, Delivery_Status)
    VALUES (pa_ordId, pa_date, pa_status)
    RETURNING Delivery_ID INTO ou_delId;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Delivery inserted with id: ' || ou_delId);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error in insert_delivery: ' || SQLERRM);
    ROLLBACK;
END insert_delivery;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE insert_cart(
  pa_custId IN NUMBER,
  pa_date   IN DATE,
  pa_status IN VARCHAR2,
  ou_cartId OUT NUMBER
) AS
BEGIN
  INSERT INTO Cart (Customer_ID, Created_Date, Status)
    VALUES (pa_custId, pa_date, pa_status)
    RETURNING Cart_ID INTO ou_cartId;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Cart inserted with id: ' || ou_cartId);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error in insert_cart: ' || SQLERRM);
    ROLLBACK;
END insert_cart;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE insert_citem(
  pa_cartId IN NUMBER,
  pa_prodId IN NUMBER,
  pa_quant  IN NUMBER,
  pa_date   IN DATE
) AS
BEGIN
  INSERT INTO Cart_Item (Cart_ID, Product_ID, Quantity, Date_Added)
    VALUES (pa_cartId, pa_prodId, pa_quant, pa_date);
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Cart item inserted for cart ' || pa_cartId);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error in insert_cart_item: ' || SQLERRM);
    ROLLBACK;
END insert_citem;
/

SET SERVEROUTPUT ON;
DECLARE
   va_supId NUMBER;
BEGIN
   -- Call the procedure and pass input values; the output is returned in v_supId.
   insert_supplier(
      pa_name => 'Lanka Fresh Farms',
      pa_phone => 7712345678,  -- Replace with a 10-digit number (no quotes)
      pa_addr => 'No.15, Galle Road, Colombo 07',
      ou_supId => va_supId
   );
   DBMS_OUTPUT.PUT_LINE('Supplier inserted with ID: ' || va_supId);
END;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE delete_supplier(
    pa_id IN NUMBER
) AS
BEGIN
    DELETE FROM Supplier WHERE Supplier_ID = pa_id;
    COMMIT;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No supplier found with ID: ' || pa_id);
        ROLLBACK; 
END delete_supplier;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE DELETESUPPLIER(pa_id IN NUMBER) AS
BEGIN
    DELETE FROM Supplier WHERE Supplier_ID = pa_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Supplier deleted successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No supplier found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error deleting supplier: ' || SQLERRM);
        ROLLBACK;
END DELETESUPPLIER;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE allsuppliers(
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Supplier_ID, Name, Contact, Address FROM Supplier;
END allsuppliers;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE get_all_suppliers(
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Supplier_ID, Name, Contact, Address FROM Supplier;
END get_all_suppliers;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE ALLSUPPLIERS(
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Supplier_ID, Name, Contact, Address FROM Supplier;
END ALLSUPPLIERS;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE gasuppliers(
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Supplier_ID, Name, Contact, Address FROM Supplier;
END gasuppliers;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GETALLSUPPLIERS(
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Supplier_ID, Name, Contact, Address FROM Supplier;
END GETALLSUPPLIERS;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GETSUPPLIERBYID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Supplier_ID, Name, Contact, Address FROM Supplier WHERE Supplier_ID = pa_id;
END GETSUPPLIERBYID;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GETSUPPLIERBYID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT  Name, Contact, Address FROM Supplier WHERE Supplier_ID = pa_id;
END GETSUPPLIERBYID;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GETSUPPLIERBYID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Name, Contact, Address FROM Supplier WHERE Supplier_ID = pa_id;

    -- Output message
    DBMS_OUTPUT.PUT_LINE('Supplier details fetched successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No supplier found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error fetching supplier: ' || SQLERRM);
END GETSUPPLIERBYID;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE getSupplierByName(
    pa_name IN VARCHAR2,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Supplier_ID, Name, Contact, Address 
    FROM Supplier 
    WHERE Name LIKE '%' || pa_name || '%';

    -- Output message
    DBMS_OUTPUT.PUT_LINE('Supplier search by name completed.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No supplier found with name: ' || pa_name);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error fetching supplier: ' || SQLERRM);
END getSupplierByName;
/
SET SERVEROUTPUT ON;
DECLARE 
    cur SYS_REFCURSOR;
BEGIN
    GETSUPPLIERBYID(1, cur); -- Replace 2 with a valid Supplier_ID
    DBMS_SQL.RETURN_RESULT(cur);
END;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GETSUPPLIERBYID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Supplier_ID, Name, Contact, Address 
    FROM Supplier 
    WHERE Supplier_ID = pa_id;

    DBMS_OUTPUT.PUT_LINE('Supplier details fetched successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No supplier found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error fetching supplier: ' || SQLERRM);
END GETSUPPLIERBYID;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_SUPPLIER(
    pa_id IN NUMBER,
    pa_name IN VARCHAR2,
    pa_contact IN NUMBER,
    pa_addr IN VARCHAR2
) AS
BEGIN
    UPDATE Supplier
    SET Name    = pa_name,
        Contact = pa_contact,
        Address = pa_addr
    WHERE Supplier_ID = pa_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Supplier updated successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No supplier found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating supplier: ' || SQLERRM);
END UPDATE_SUPPLIER;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GETCUSTOMERBYID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Customer_ID, Name, Email, Contact, Address 
    FROM Customer 
    WHERE Customer_ID = pa_id;
    
    DBMS_OUTPUT.PUT_LINE('Customer details fetched successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No customer found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error fetching customer: ' || SQLERRM);
END GETCUSTOMERBYID;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(
    pa_name   IN VARCHAR2,
    pa_email  IN VARCHAR2,
    pa_contact IN NUMBER,
    pa_addr   IN VARCHAR2,
    ou_custId OUT NUMBER
) AS
BEGIN
    INSERT INTO Customer (Name, Email, Contact, Address)
    VALUES (pa_name, pa_email, pa_contact, pa_addr)
    RETURNING Customer_ID INTO ou_custId;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Customer inserted successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inserting customer: ' || SQLERRM);
END INSERT_CUSTOMER;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_CUSTOMER(
    pa_id     IN NUMBER,
    pa_name   IN VARCHAR2,
    pa_email  IN VARCHAR2,
    pa_contact IN NUMBER,
    pa_addr   IN VARCHAR2
) AS
BEGIN
    UPDATE Customer
    SET Name    = pa_name,
        Email   = pa_email,
        Contact = pa_contact,
        Address = pa_addr
    WHERE Customer_ID = pa_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Customer updated successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No customer found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating customer: ' || SQLERRM);
END UPDATE_CUSTOMER;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE DELETE_CUSTOMER(
    pa_id IN NUMBER
) AS
BEGIN
    DELETE FROM Customer
    WHERE Customer_ID = pa_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Customer deleted successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No customer found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error deleting customer: ' || SQLERRM);
END DELETE_CUSTOMER;
/

SET SERVEROUTPUT ON;
DECLARE
    v_custId NUMBER;
BEGIN
    -- Call the procedure and pass input values
    INSERT_CUSTOMER(
        'John Doe', 
        'john.doe@example.com', 
        7712345678, 
        '123 Main Street, Colombo', 
        v_custId
    );

    -- Display the returned Customer_ID
    DBMS_OUTPUT.PUT_LINE('Inserted Customer ID: ' || v_custId);
END;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GETPRODUCTBYID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Product_ID, Supplier_ID, Name, Description, Category, Price, Stock_Quantity 
    FROM Product 
    WHERE Product_ID = pa_id;

    DBMS_OUTPUT.PUT_LINE('Product details fetched successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No product found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error fetching product: ' || SQLERRM);
END GETPRODUCTBYID;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE INSERT_PRODUCT(
    pa_supplier_id    IN NUMBER,
    pa_name           IN VARCHAR2,
    pa_description    IN VARCHAR2,
    pa_category       IN VARCHAR2,
    pa_price          IN NUMBER,
    pa_stock_quantity IN NUMBER,
    ou_prod_id        OUT NUMBER
) AS
BEGIN
    INSERT INTO Product (Supplier_ID, Name, Description, Category, Price, Stock_Quantity)
    VALUES (pa_supplier_id, pa_name, pa_description, pa_category, pa_price, pa_stock_quantity)
    RETURNING Product_ID INTO ou_prod_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Product inserted successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inserting product: ' || SQLERRM);
END INSERT_PRODUCT;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_PRODUCT(
    pa_id             IN NUMBER,
    pa_supplier_id    IN NUMBER,
    pa_name           IN VARCHAR2,
    pa_description    IN VARCHAR2,
    pa_category       IN VARCHAR2,
    pa_price          IN NUMBER,
    pa_stock_quantity IN NUMBER
) AS
BEGIN
    UPDATE Product
    SET Supplier_ID     = pa_supplier_id,
        Name            = pa_name,
        Description     = pa_description,
        Category        = pa_category,
        Price           = pa_price,
        Stock_Quantity  = pa_stock_quantity
    WHERE Product_ID = pa_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Product updated successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No product found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating product: ' || SQLERRM);
END UPDATE_PRODUCT;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE DELETE_PRODUCT(
    pa_id IN NUMBER
) AS
BEGIN
    DELETE FROM Product
    WHERE Product_ID = pa_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Product deleted successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No product found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error deleting product: ' || SQLERRM);
END DELETE_PRODUCT;
/

SET SERVEROUTPUT ON;
DECLARE
    v_prod_id NUMBER;
BEGIN
    -- Call the procedure and pass input values
    INSERT_PRODUCT(
        1,  -- Supplier ID (Example)
        'Bananan', 
        'ABC', 
        'Fruits', 
        450,  -- Price
        100,  -- Stock Quantity
        v_prod_id  -- Output Product ID
    );

    -- Display the returned Product_ID
    DBMS_OUTPUT.PUT_LINE('Inserted Product ID: ' || v_prod_id);
END;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GETORDERBYID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
    SELECT Order_ID, Customer_ID, Order_Date, Shipping_Address, Total_Amount 
    FROM Orders 
    WHERE Order_ID = pa_id;

    DBMS_OUTPUT.PUT_LINE('Order details fetched successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No order found with ID: ' || pa_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error fetching order: ' || SQLERRM);
END GETORDERBYID;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE INSERT_ORDER(
    pa_customer_id     IN NUMBER,
    pa_shipping_addr   IN VARCHAR2,
    pa_total_amount    IN NUMBER,
    ou_order_id        OUT NUMBER
) AS
BEGIN
    INSERT INTO Orders (Customer_ID, Shipping_Address, Total_Amount)
    VALUES (pa_customer_id, pa_shipping_addr, pa_total_amount)
    RETURNING Order_ID INTO ou_order_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Order inserted successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inserting order: ' || SQLERRM);
END INSERT_ORDER;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_ORDER(
    pa_order_id        IN NUMBER,
    pa_customer_id     IN NUMBER,
    pa_order_date      IN DATE,
    pa_shipping_addr   IN VARCHAR2,
    pa_total_amount    IN NUMBER
) AS
BEGIN
    UPDATE Orders
    SET Customer_ID     = pa_customer_id,
        Order_Date      = pa_order_date,
        Shipping_Address= pa_shipping_addr,
        Total_Amount    = pa_total_amount
    WHERE Order_ID = pa_order_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Order updated successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No order found with ID: ' || pa_order_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating order: ' || SQLERRM);
END UPDATE_ORDER;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE DELETE_ORDER(
    pa_order_id IN NUMBER
) AS
BEGIN
    DELETE FROM Orders
    WHERE Order_ID = pa_order_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Order deleted successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No order found with ID: ' || pa_order_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error deleting order: ' || SQLERRM);
END DELETE_ORDER;
/
SET SERVEROUTPUT ON;
DECLARE
    v_order_id NUMBER;
BEGIN
    -- Call the procedure and pass input values
    INSERT_ORDER(
        1,  -- Customer ID (Example)
        '456 Elm Street, Colombo', 
        1250,  -- Total Amount
        v_order_id  -- Output Order ID
    );

    -- Display the returned Order_ID
    DBMS_OUTPUT.PUT_LINE('Inserted Order ID: ' || v_order_id);
END;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE INSERT_ORDER_ITEM(
    pa_order_id   IN NUMBER,
    pa_product_id IN NUMBER,
    pa_quantity   IN NUMBER,
    pa_unit_price IN NUMBER
) AS
BEGIN
    INSERT INTO Order_Item (Order_ID, Product_ID, Quantity, Unit_Price)
    VALUES (pa_order_id, pa_product_id, pa_quantity, pa_unit_price);
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Order item inserted successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inserting order item: ' || SQLERRM);
END INSERT_ORDER_ITEM;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_ORDER_ITEM(
    pa_order_id   IN NUMBER,
    pa_product_id IN NUMBER,
    pa_quantity   IN NUMBER,
    pa_unit_price IN NUMBER
) AS
BEGIN
    UPDATE Order_Item
    SET Quantity = pa_quantity,
        Unit_Price = pa_unit_price
    WHERE Order_ID = pa_order_id AND Product_ID = pa_product_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Order item updated successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No order item found for Order_ID: ' || pa_order_id ||
                             ' and Product_ID: ' || pa_product_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating order item: ' || SQLERRM);
END UPDATE_ORDER_ITEM;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GET_ORDER_ITEM(
    pa_order_id   IN NUMBER,
    pa_product_id IN NUMBER,
    cur           OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
      SELECT Order_ID, Product_ID, Quantity, Unit_Price
      FROM Order_Item
      WHERE Order_ID = pa_order_id AND Product_ID = pa_product_id;
      
    DBMS_OUTPUT.PUT_LINE('Order item fetched successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No order item found for Order_ID: ' || pa_order_id ||
                             ' and Product_ID: ' || pa_product_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error fetching order item: ' || SQLERRM);
END GET_ORDER_ITEM;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE DELETE_ORDER_ITEM(
    pa_order_id   IN NUMBER,
    pa_product_id IN NUMBER
) AS
BEGIN
    DELETE FROM Order_Item
    WHERE Order_ID = pa_order_id AND Product_ID = pa_product_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Order item deleted successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No order item found for Order_ID: ' || pa_order_id ||
                             ' and Product_ID: ' || pa_product_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error deleting order item: ' || SQLERRM);
END DELETE_ORDER_ITEM;
/

SET SERVEROUTPUT ON;
BEGIN
   
    INSERT_ORDER_ITEM(
        1,  
        1,  
        1,  
        500  
    );
END;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE INSERT_PAYMENT(
    pa_order_id      IN NUMBER,
    pa_payment_method IN VARCHAR2,
    pa_amount        IN NUMBER,
    ou_pay_id        OUT NUMBER
) AS
BEGIN
    INSERT INTO Payment (Order_ID, Payment_Method, Amount)
    VALUES (pa_order_id, pa_payment_method, pa_amount)
    RETURNING Payment_ID INTO ou_pay_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Payment inserted successfully.');
EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error inserting payment: ' || SQLERRM);
END INSERT_PAYMENT;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_PAYMENT(
    pa_payment_id    IN NUMBER,
    pa_order_id      IN NUMBER,
    pa_payment_date  IN DATE,
    pa_payment_method IN VARCHAR2,
    pa_amount        IN NUMBER
) AS
BEGIN
    UPDATE Payment
    SET Order_ID = pa_order_id,
        Payment_Date = pa_payment_date,
        Payment_Method = pa_payment_method,
        Amount = pa_amount
    WHERE Payment_ID = pa_payment_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Payment updated successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No payment found with ID: ' || pa_payment_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error updating payment: ' || SQLERRM);
END UPDATE_PAYMENT;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE DELETE_PAYMENT(
    pa_payment_id IN NUMBER
) AS
BEGIN
    DELETE FROM Payment
    WHERE Payment_ID = pa_payment_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Payment deleted successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No payment found with ID: ' || pa_payment_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error deleting payment: ' || SQLERRM);
END DELETE_PAYMENT;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GETPAYMENTBYID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
      SELECT Payment_ID, Order_ID, Payment_Date, Payment_Method, Amount
      FROM Payment
      WHERE Payment_ID = pa_id;

    DBMS_OUTPUT.PUT_LINE('Payment fetched successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No payment found with ID: ' || pa_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error fetching payment: ' || SQLERRM);
END GETPAYMENTBYID;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GET_DELIVERY_BY_ID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
      SELECT Delivery_ID, Order_ID, Delivery_Date, Delivery_Status
      FROM Delivery
      WHERE Delivery_ID = pa_id;

    DBMS_OUTPUT.PUT_LINE('Delivery retrieved successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No delivery found with ID: ' || pa_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error retrieving delivery: ' || SQLERRM);
END GET_DELIVERY_BY_ID;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE INSERT_DELIVERY(
    pa_order_id       IN NUMBER,
    pa_delivery_date  IN DATE,
    pa_delivery_status IN VARCHAR2,
    ou_del_id         OUT NUMBER
) AS
BEGIN
    INSERT INTO Delivery (Order_ID, Delivery_Date, Delivery_Status)
    VALUES (pa_order_id, pa_delivery_date, pa_delivery_status)
    RETURNING Delivery_ID INTO ou_del_id;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Delivery inserted successfully.');
EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error inserting delivery: ' || SQLERRM);
END INSERT_DELIVERY;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_DELIVERY(
    pa_delivery_id    IN NUMBER,
    pa_order_id       IN NUMBER,
    pa_delivery_date  IN DATE,
    pa_delivery_status IN VARCHAR2
) AS
BEGIN
    UPDATE Delivery
    SET Order_ID = pa_order_id,
        Delivery_Date = pa_delivery_date,
        Delivery_Status = pa_delivery_status
    WHERE Delivery_ID = pa_delivery_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Delivery updated successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No delivery found with ID: ' || pa_delivery_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error updating delivery: ' || SQLERRM);
END UPDATE_DELIVERY;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE DELETE_DELIVERY(
    pa_delivery_id IN NUMBER
) AS
BEGIN
    DELETE FROM Delivery
    WHERE Delivery_ID = pa_delivery_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Delivery deleted successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No delivery found with ID: ' || pa_delivery_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error deleting delivery: ' || SQLERRM);
END DELETE_DELIVERY;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GET_CART_BY_ID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
      SELECT Cart_ID, Customer_ID, Created_Date, Status
      FROM Cart
      WHERE Cart_ID = pa_id;
      
    DBMS_OUTPUT.PUT_LINE('Cart retrieved successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No cart found with ID: ' || pa_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error retrieving cart: ' || SQLERRM);
END GET_CART_BY_ID;
/
CREATE TABLE Cart (
  Cart_ID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Customer_ID  NUMBER NOT NULL,
  Total_item NUMBER,
  Total_Price NUMBER(10,2) NOT NULL,
  CONSTRAINT fk_Cart_Customer FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID)
);

DROP TABLE Cart CASCADE CONSTRAINTS;
DROP TABLE Cart_item CASCADE CONSTRAINTS;

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GET_CART_BY_ID(
    pa_id IN NUMBER,
    cur OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
      SELECT Cart_ID, Customer_ID, Total_item, Total_Price
      FROM Cart
      WHERE Cart_ID = pa_id;

    DBMS_OUTPUT.PUT_LINE('Cart retrieved successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No cart found with ID: ' || pa_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error retrieving cart: ' || SQLERRM);
END GET_CART_BY_ID;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE INSERT_CART(
    pa_customer_id IN NUMBER,
    pa_total_item  IN NUMBER,
    pa_total_price IN NUMBER,
    ou_cart_id     OUT NUMBER
) AS
BEGIN
    INSERT INTO Cart (Customer_ID, Total_item, Total_Price)
    VALUES (pa_customer_id, pa_total_item, pa_total_price)
    RETURNING Cart_ID INTO ou_cart_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Cart inserted successfully.');
EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error inserting cart: ' || SQLERRM);
END INSERT_CART;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_CART(
    pa_cart_id     IN NUMBER,
    pa_customer_id IN NUMBER,
    pa_total_item  IN NUMBER,
    pa_total_price IN NUMBER
) AS
BEGIN
    UPDATE Cart
    SET Customer_ID = pa_customer_id,
        Total_item  = pa_total_item,
        Total_Price = pa_total_price
    WHERE Cart_ID = pa_cart_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Cart updated successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No cart found with ID: ' || pa_cart_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error updating cart: ' || SQLERRM);
END UPDATE_CART;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE DELETE_CART(
    pa_cart_id IN NUMBER
) AS
BEGIN
    DELETE FROM Cart
    WHERE Cart_ID = pa_cart_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Cart deleted successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No cart found with ID: ' || pa_cart_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error deleting cart: ' || SQLERRM);
END DELETE_CART;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GET_CART_ITEM(
    pa_cart_id   IN NUMBER,
    pa_product_id IN NUMBER,
    cur           OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur FOR
      SELECT Cart_ID, Product_ID, Quantity, Date_Added
      FROM Cart_Item
      WHERE Cart_ID = pa_cart_id AND Product_ID = pa_product_id;

    DBMS_OUTPUT.PUT_LINE('Cart item retrieved successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No cart item found for Cart_ID: ' || pa_cart_id || ' and Product_ID: ' || pa_product_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error retrieving cart item: ' || SQLERRM);
END GET_CART_ITEM;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE INSERT_CART_ITEM(
    pa_cart_id   IN NUMBER,
    pa_product_id IN NUMBER,
    pa_quantity   IN NUMBER,
    pa_date_added IN DATE
) AS
BEGIN
    INSERT INTO Cart_Item (Cart_ID, Product_ID, Quantity, Date_Added)
    VALUES (pa_cart_id, pa_product_id, pa_quantity, pa_date_added);
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Cart item inserted successfully.');
EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error inserting cart item: ' || SQLERRM);
END INSERT_CART_ITEM;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_CART_ITEM(
    pa_cart_id   IN NUMBER,
    pa_product_id IN NUMBER,
    pa_quantity   IN NUMBER,
    pa_date_added IN DATE
) AS
BEGIN
    UPDATE Cart_Item
    SET Quantity  = pa_quantity,
        Date_Added = pa_date_added
    WHERE Cart_ID = pa_cart_id AND Product_ID = pa_product_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Cart item updated successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No cart item found for update with Cart_ID: ' || pa_cart_id || ' and Product_ID: ' || pa_product_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error updating cart item: ' || SQLERRM);
END UPDATE_CART_ITEM;
/
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE DELETE_CART_ITEM(
    pa_cart_id   IN NUMBER,
    pa_product_id IN NUMBER
) AS
BEGIN
    DELETE FROM Cart_Item
    WHERE Cart_ID = pa_cart_id AND Product_ID = pa_product_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Cart item deleted successfully.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No cart item found to delete for Cart_ID: ' || pa_cart_id || ' and Product_ID: ' || pa_product_id);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error deleting cart item: ' || SQLERRM);
END DELETE_CART_ITEM;
/
